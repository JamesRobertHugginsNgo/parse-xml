const parseXml=(()=>{function n(n){const t=n.indexOf("<");return-1===t?{node:n,string:""}:{node:n.substring(0,t),string:n.substring(t)}}function t(n){const t="?"===n.charAt(1)?2:1,r=n.indexOf(">"),e=1===t&&"/"!==n.charAt(r-1)||2===t&&"?"!==n.charAt(r-1),u=e?r:r-1,i=n.substring(t,u),o=[];let c=null;for(let n=0,t=i.length;n<t;n++){const t=i.charAt(n);'"'!==t&&"'"!==t||(null===c?c=t:c===t&&(c=null)),null===c&&" "===t&&o.push(n)}o.push(-1);const l=[];let g=0;for(let n=0,t=o.length;n<t;n++){const t=o[n];-1===t?l.push(i.substring(g)):(l.push(i.substring(g,t)),g=t+1)}const h={name:l.shift()};if(2===t&&(h.isDeclaration=!0),0!==l.length&&(h.attributes=l.reduce(((n,t)=>{const[s,r]=t.split("=");return n[s]=r.substring(1,r.length-1),n}),{})),n=n.substring(r+1),e){const{nodes:t,string:r}=s(n);h.children=t,n=r.substring(r.indexOf(">")+1)}return{node:h,string:n}}function s(s){const r=[];for(;s.length>0&&("<"!==s.charAt(0)||"/"!==s.charAt(1));){const{node:e,string:u}="<"===s.charAt(0)?t(s):n(s);r.push(e),s=u}return{nodes:r,string:s}}return function(n){return s(n).nodes}})();export default parseXml;
//# sourceMappingURL=parse-xml.min.js.map
